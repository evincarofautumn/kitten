/*
 * brainfuck.ktn
 *
 * Contributed by @strager <https://github.com/strager/>
 *
 * Modified by Jon Purdy <https://github.com/evincarofautumn/>
 *
 */

////////////////////////////////////////////////////////////
// Configuration

define debug (-> bool): false

// Some programs want 0; some want -1.
define eofCell (-> int): -1

////////////////////////////////////////////////////////////
// Utilities

// FIXME(strager): Bad approximation.
define getCharApprox (-> char?):
  getLine head

////////////////////////////////////////////////////////////
// Interpreter

define runProgram ([char] ->):
  -> program;
  0 1024 replicate -> ram;
  program 0 ram 0
  loopProgram

define loopProgram([char] int [int] int ->):
  stepProgram -> running;
  if (running):
    loopProgram
  else:
    drop drop drop drop

define stepProgram ([char] int [int] int -> [char] int [int] int bool):
  -> program pc ram ramc;

  if (debug):
    ram ramc dumpMemory
    program pc dumpProgram

  [ '<' {
      program (pc + 1) ram (ramc - 1)
    } pair
  , '>' {
      program (pc + 1) ram (ramc + 1)
    } pair
  , '+' {
      program (pc + 1) ram(ramc .~: (+ 1)) ramc
    } pair
  , '-' {
      program (pc + 1) ram(ramc .~: (- 1)) ramc
    } pair
  , '[' {
      if (ram!ramc = 0):
        option (program pc findMatchingRBracket):
          -> rbracket;
          program (rbracket + 1) ram ramc
        else:
          ["No matching ] at position ", pc showInt] concat error
      else:
        program (pc + 1) ram ramc
    } pair
  , ']' {
      option (program pc findMatchingLBracket):
        -> lbracket;
        program lbracket ram ramc
      else:
        ["No matching [ at position ", pc showInt] concat error
    } pair
  , '.' {
      ram!ramc -> cell;
      option (cell intToChar):
        vector print
      else:
        ["Tried to print ", cell showInt, ", which is out of range"] concat error
      program (pc + 1) ram ramc
    } pair
  , ',' {
      getCharApprox \charToInt eofCell maybe -> cell;
      program (pc + 1) ram(ramc .= cell) ramc
    } pair
  ] -> instructionTable;

  option (program.(pc)):
    -> instruction;
    option (instructionTable instruction \eqChar lookUp):
      apply
    else:
      program (pc + 1) ram ramc
    true // Keep running.
  else:
    program pc ram ramc
    false // Halt.

define findLBracket ([char] int int -> int?):
  -> program pc depth;
  option (program.(pc)):
    [ '[' {
        if (depth = 0):
          pc some
        else:
          program (pc - 1) (depth - 1) findLBracket
      } pair
    , ']' {
        program (pc - 1) (depth + 1) findLBracket
      } pair
    ] swap \eqChar lookUp
    option:
      apply
    else:
      program (pc - 1) depth findLBracket
  else:
    none

define findMatchingLBracket([char] int -> int?):
  (- 1) 0 findLBracket

// TODO(strager): Remove duplication with findLBracket.
define findRBracket ([char] int int -> int?):
  -> program pc depth;
  option (program.(pc)):
    [ '[' {
        program (pc + 1) (depth + 1) findRBracket
      } pair
    , ']' {
        if (depth = 0):
          pc some
        else:
          program (pc + 1) (depth - 1) findRBracket
      } pair
    ] swap \eqChar lookUp
    option:
      apply
    else:
      program (pc + 1) depth findRBracket
  else:
    none

define findMatchingRBracket ([char] int -> int?):
  (+ 1) 0 findRBracket

////////////////////////////////////////////////////////////
// Programs

define progHelloWorld (-> [char]):
  "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>."

define progRot13 (-> [char]):
  [ "-,+[                         Read first character and start outer character reading loop"
  , "    -[                       Skip forward if character is 0"
  , "        >>++++[>++++++++<-]  Set up divisor (32) for division loop"
  , "                               (MEMORY LAYOUT: dividend copy remainder divisor quotient zero zero)"
  , "        <+<-[                Set up dividend (x minus 1) and enter division loop"
  , "            >+>+>-[>>>]      Increase copy and remainder / reduce divisor / Normal case: skip forward"
  , "            <[[>+<-]>>+>]    Special case: move remainder back to divisor and increase quotient"
  , "            <<<<<-           Decrement dividend"
  , "        ]                    End division loop"
  , "    ]>>>[-]+                 End skip loop; zero former divisor and reuse space for a flag"
  , "    >--[-[<->+++[-]]]<[         Zero that flag unless quotient was 2 or 3; zero quotient; check flag"
  , "        ++++++++++++<[       If flag then set up divisor (13) for second division loop"
  , "                               (MEMORY LAYOUT: zero copy dividend divisor remainder quotient zero zero)"
  , "            >-[>+>>]         Reduce divisor; Normal case: increase remainder"
  , "            >[+[<+>-]>+>>]   Special case: increase remainder / move it back to divisor / increase quotient"
  , "            <<<<<-           Decrease dividend"
  , "        ]                    End division loop"
  , "        >>[<+>-]             Add remainder back to divisor to get a useful 13"
  , "        >[                   Skip forward if quotient was 0"
  , "            -[               Decrement quotient and skip forward if quotient was 1"
  , "                -<<[-]>>     Zero quotient and divisor if quotient was 2"
  , "            ]<<[<<->>-]>>    Zero divisor and subtract 13 from copy if quotient was 1"
  , "        ]<<[<<+>>-]          Zero divisor and add 13 to copy if quotient was 0"
  , "    ]                        End outer skip loop (jump to here if ((character minus 1)/32) was not 2 or 3)"
  , "    <[-]                     Clear remainder from first division if second division was skipped"
  , "    <.[-]                    Output ROT13ed character from copy and clear it"
  , "    <-,+                     Read next character"
  , "]                            End character reading loop"
  ] concat

define progCat (-> [char]):
  ",+[-.,+]"

define progSort (-> [char]):
  ">,+[>,+]<[[[->>+>>-[<]<<<]>[<]<[->>>>+<<<<]>>[>+>+<<-]<<<]>>>>-.[-]>[>]<]"

////////////////////////////////////////////////////////////
// Debugging

define dumpMemory ([int] int ->):
  -> ram ramc;

  "Memory:" say
  upto 32:
    -> index;
    ram!index -> cell;
    ["[", index showInt, "] ", cell showInt] concat print
    if (index = ramc): " <" print
    newline

define dumpProgram ([char] int ->):
  -> _ pc;
  ["Program counter: ", pc showInt] concat say

////////////////////////////////////////////////////////////
// Main

progHelloWorld
runProgram
