/*
 * tictactoe.ktn
 *
 * Contributed by @strager <https://github.com/strager/>
 *
 * Modified by Jon Purdy <https://github.com/evincarofautumn/>
 *
 */

ticTacToe

define ticTacToe (->):
  { game playAgain } loopWhile

define game (->):
  newBoard 'x' gameLoop -> finalBoard winner;

  newline
  if (winner '*' eqChar):
    "It's a tie!\n"
  else:
    [winner] " wins!\n" cat
  print

  finalBoard printBoard

define gameLoop ([char] char -> [char] char):
  -> board player;

  board getWinner -> winner;
  if ("xo*" winner elemChar):
    board winner
  else:
    board player askTurn
    player nextPlayer gameLoop

define askTurn ([char] char -> [char]):
  -> board player;

  board printBoard

  [
    "It is ",
    [player],
    "'s turn. Choose your move: ",
  ] concat print

  getLine -> input;
  input readMoveLine -> mxy;

  option (mxy):
    -> xy;
    board
    xy first xy rest xyToCellNumber
    player editBoard
  else:
    if (input "q" eqString):
      0 exit
    else:
      "I didn't understand that. Type e.g. \"a3\" to "
      "move in the bottom-left cell. Type \"q\" to exit."
      cat say
      board player askTurn

define nextPlayer (char -> char):
  -> p;
  if (p 'x' eqChar) {'o'} else {'x'}

define checkSets (-> [[int]]):
  [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],  // Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8],  // Columns
    [0, 4, 8], [2, 4, 6],             // Diagonals
  ]

// ' ', 'x', or 'o'
define getCheckSetWinner ([char] [int] -> char):
  getAll -> players;
  if (players { option {'x' eqChar} else {false} } all):
    'x'
  else:
    if (players { option {'o' eqChar} else {false} } all):
      'o'
    else:
      ' '

// ' ', 'x', 'o', or '*'
define getWinner ([char] -> char):
  -> board;

  board
    { ' ' eqChar } filter
    isEmpty
    -> filled;

  if (filled): '*'
  else:
    checkSets
    { board swap getCheckSetWinner } map
    { ' ' neChar } filter
    -> winners;

    if (winners isEmpty):
      ' '
    else:
      if (winners { 'x' eqChar } all):
        'x'
      else:
        if (winners { 'o' eqChar } all):
          'o'
        else:
          '*'

define playAgain (-> bool):
  "Play another game? [yN] " prompt -> input;
  if (input isYes):
    newline true
  else:
    if (input isNo || input isEmpty):
      newline false
    else:
      playAgain

define isYes ([char] -> bool): { "yY" swap elemChar } any
define isNo ([char] -> bool): { "nN" swap elemChar } any

// Board

define newBoard (-> [char]): ' ' 9 replicate

define editBoard ([char] int char -> [char]):
  -> number player;
  number cellNumberToIndex .= player

define printBoard ([char] ->):
  showBoard print

define showBoard ([char] -> [char]):
  -> board;
  "  --+-+--\n" -> divider;
  "   A B C\n" -> heading;
  [
    heading, "1 ", board 0 showBoardRow, "\n",
    divider, "2 ", board 1 showBoardRow, "\n",
    divider, "3 ", board 2 showBoardRow, "\n",
  ] concat

define showBoardRow ([char] int -> [char]):
  -> board rowIndex;
  rowIndex * 3 -> index;
  [
    ' ', board (0 + index) showBoardCellAt,
    '|', board (1 + index) showBoardCellAt,
    '|', board (2 + index) showBoardCellAt,
  ]

define showBoardCellAt ([char] int -> char):
  cellNumberToIndex (!) showBoardCell

define cellNumberToIndex (int -> int):
  (8 -)

define showBoardCell (char -> char) {}

// Input

define readMoveLine ([char] -> (int & int)?):
  -> chars;
  if (chars length = 2):
    (chars!0) (chars!1) readXY
  else:
    none

define readXY (char char -> (int & int)?):
  -> x y;
  x y readXY_ -> mxy;
  option (mxy):
    some
  else:
    y x readXY_

define readXY_ (char char -> (int & int)?):
  \readX \readY both -> mx my;
  mx my \pair liftOption2

define readX (char -> int?):
  -> c;
  if ("aA" c elemChar): 0 some
  else:
    if ("bB" c elemChar): 1 some
    else:
      if ("cC" c elemChar): 2 some
      else: none

define readY (char -> int?):
  -> c;
  if ("1!" c elemChar): 0 some
  else:
    if ("2@" c elemChar): 1 some
    else:
      if ("3#" c elemChar): 2 some
      else: none

define xyToCellNumber (int int -> int):
  -> x y;
  y * 3 + x
