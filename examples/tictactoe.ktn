/*
 * tictactoe.ktn
 *
 * Contributed by @strager <https://github.com/strager/>
 *
 * Modified by Jon Purdy <https://github.com/evincarofautumn/>
 *
 */

ticTacToe

def ticTacToe (->):
  { game playAgain } loopWhile

def game (->):
  newBoard 'x' gameLoop -> { finalBoard winner }

  newline
  \if winner '*' eqChar:
    "It's a tie!\n"
  else:
    [winner] " wins!\n" cat
  print

  finalBoard printBoard

def gameLoop ([Char] Char -> [Char] Char):
  -> player
  -> board

  board getWinner -> winner
  \if "xo*" winner elemChar:
    board winner
  else:
    board player askTurn
    player nextPlayer gameLoop

def askTurn ([Char] Char -> [Char]):
  -> player
  -> board

  board printBoard

  [
    "It is ",
    [player],
    "'s turn. Choose your move: ",
  ] concat print

  getLine -> input
  input readMoveLine -> mxy

  \option mxy:
    -> xy
    board
    xy first xy rest xyToCellNumber
    player editBoard
  else if input "q" eqString:
    0 exit board
  else:
    "I didn't understand that. Type e.g. \"a3\" to "
    "move in the bottom-left cell. Type \"q\" to exit."
    cat say
    board player askTurn

def nextPlayer (Char -> Char):
  -> p
  \if p 'x' eqChar: 'o' else: 'x'

def checkSets (-> [[Int]]):
  [
    [0, 1, 2], [3, 4, 5], [6, 7, 8],  // Rows
    [0, 3, 6], [1, 4, 7], [2, 5, 8],  // Columns
    [0, 4, 8], [2, 4, 6],             // Diagonals
  ]

// ' ', 'x', or 'o'
def getCheckSetWinner ([Char] [Int] -> Char):
  getAll -> players
  \if (players { {'x' eqChar} {false} option_else } all):
    'x'
  else if (players { {'o' eqChar} {false} option_else } all):
    'o'
  else:
    ' '

// ' ', 'x', 'o', or '*'
def getWinner ([Char] -> Char):
  -> board

  board
    { ' ' eqChar } filter
    isEmpty
    -> filled

  \if filled: '*'
  else:
    checkSets
    { board swap getCheckSetWinner } map
    { ' ' neChar } filter
    -> winners

    \if winners isEmpty:
      ' '
    else if (winners { 'x' eqChar } all):
      'x'
    else if (winners { 'o' eqChar } all):
      'o'
    else:
      '*'

def playAgain (-> Bool):
  "Play another game? [yN] " prompt -> input
  \if input isYes:
    newline true
  else if (input isNo) (input isEmpty) ||:
    newline false
  else:
    playAgain

def isYes ([Char] -> Bool): { "yY" swap elemChar } any
def isNo ([Char] -> Bool): { "nN" swap elemChar } any

// Board

def newBoard (-> [Char]): ' ' 9 replicate

def editBoard ([Char] Int Char -> [Char]):
  -> { number player }
  player (number cellNumberToIndex) #=

def printBoard ([Char] ->):
  showBoard print

def showBoard ([Char] -> [Char]):
  -> board
  "  --+-+--\n" -> divider
  "   A B C\n" -> heading
  [
    heading, "1 ", board 0 showBoardRow, "\n",
    divider, "2 ", board 1 showBoardRow, "\n",
    divider, "3 ", board 2 showBoardRow, "\n",
  ] concat

def showBoardRow ([Char] Int -> [Char]):
  -> rowIndex
  -> board
  rowIndex 3 * -> index
  [
    ' ', board 0 index + showBoardCellAt,
    '|', board 1 index + showBoardCellAt,
    '|', board 2 index + showBoardCellAt,
  ]

def showBoardCellAt ([Char] Int -> Char):
  cellNumberToIndex#! showBoardCell

def cellNumberToIndex (Int -> Int):
  8 swap -

def showBoardCell (Char -> Char) {}

// Input

def readMoveLine ([Char] -> (Int & Int)?):
  -> chars
  \if chars length 2 =:
    (chars 0#!) (chars 1#!) readXY
  else:
    none

def readXY (Char Char -> (Int & Int)?):
  -> { x y }
  x y readXY_ -> mxy
  \option mxy:
    some
  else:
    y x readXY_

def readXY_ (Char Char -> (Int & Int)?):
  readX -> mx
  readY -> my
  mx my {pair} liftOption2

def readX (Char -> Int?):
  -> c
  \if "aA" c elemChar: 0 some
  else if "bB" c elemChar: 1 some
  else if "cC" c elemChar: 2 some
  else: none

def readY (Char -> Int?):
  -> c
  \if ("1!" c elemChar): 0 some
  else if ("2@" c elemChar): 1 some
  else if ("3#" c elemChar): 2 some
  else: none

def xyToCellNumber (Int Int -> Int):
  -> { x y }
  y 3 *
  x +
