def levenshtein ([Char] [Char] -> Int):
  -> second
  -> first
  first length -> rows
  second length -> columns

  // A matrix such that the value at row i, column j is the
  // Levenshtein distance between the first i characters of
  // the first string and the first j characters of the
  // second string.
  0 columns++ replicate rows++ replicate

  // Distance from any first string to empty second string.
  { -> row
    row  row 0 ##!
  } 0 rows mapRange

  // Distance from any second string to empty first string.
  { -> column
    column  0 column ##!
  } 0 columns mapRange

  { -> row
    { -> { distances column }

      first row-- # -> firstChar
      second column-- # -> secondChar

      distances
      if (firstChar secondChar eqChar):
        distances row-- column-- ##
      else:
        distances row-- column   ##  // deletion
        distances row   column-- ##  // insertion
        distances row-- column-- ##  // substitution
        minInt3 ++
      row column ##!

    } 1 columns mapRange
  } 1 rows mapRange

  rows columns ##
 
"kitten" "sitting" levenshtein sayInt
"rosettacode" "raisethysword" levenshtein sayInt
