vocab kitten {

  intrinsic call<R..., S...> (R..., (R... -> S...) -> S...)
  intrinsic forget<A> (A ->)
  intrinsic swap<A, B> (A, B -> B, A)

}

define call<R..., S...> (R..., (R... -> S...) -> S...):
  _::kitten::call

about call:
  docs: """
    Applies a closure to the stack.

    This denotes modus ponens: if we have a program state 'R...', a permission
    '+P', and a closure '(R... -> S... +P)' as evidence that we can convert
    'R...' to 'S...' given '+P', then we can invoke the closure to produce the
    new state 'S...'.
    """

trait copy<T> (T -> T)

about copy:
  docs: """
    Copy constructor, implicitly called for every mention of a local variable
    after the first. To make a type implicitly copyable without any additional
    logic, simply write an instance with an empty body. Types that don't
    implement this trait can only be moved.
    """

trait destroy<T> (T -> T)

about destroy:
  docs: """
    Destructor, implicitly called when a local variable goes out of scope, or
    when a value is explicitly dropped with `-> _;`. Types that don't implement
    this trait can't be dropped.
    """

type Int8 {}

instance copy (Int8 -> Int8) {}

about type Int8:
  size: 1
  alignment: 1

type Int16 {}

instance copy (Int16 -> Int16) {}

about type Int16:
  size: 2
  alignment: 2

type Int32 {}

instance copy (Int32 -> Int32) {}

about type Int32:
  size: 4
  alignment: 4

type Int64 {}

instance copy (Int64 -> Int64) {}

about type Int64:
  size: 8
  alignment: 8

type UInt8 {}

instance copy (UInt8 -> UInt8) {}

about type UInt8:
  size: 1
  alignment: 1

type UInt16 {}

instance copy (UInt16 -> UInt16) {}

about type UInt16:
  size: 2
  alignment: 2

type UInt32 {}

instance copy (UInt32 -> UInt32) {}

about type UInt32:
  size: 4
  alignment: 4

type UInt64 {}

instance copy (UInt64 -> UInt64) {}

about type UInt64:
  size: 8
  alignment: 8

type Char {}

about type Char:
  size: 4
  alignment: 4

instance copy (Char -> Char) {}

type Float32 {}

instance copy (Float32 -> Float32) {}

about type Float32:
  size: 4
  alignment: 4

type Float64 {}

instance copy (Float64 -> Float64) {}

about type Float64:
  size: 8
  alignment: 8

vocab kitten {

  // Signed integer arithmetic.

  intrinsic neg_int8 (Int8 -> Int8)
  intrinsic add_int8 (Int8, Int8 -> Int8)
  intrinsic sub_int8 (Int8, Int8 -> Int8)
  intrinsic mul_int8 (Int8, Int8 -> Int8)
  intrinsic div_int8 (Int8, Int8 -> Int8)
  intrinsic mod_int8 (Int8, Int8 -> Int8)

  intrinsic neg_int16 (Int16 -> Int16)
  intrinsic add_int16 (Int16, Int16 -> Int16)
  intrinsic sub_int16 (Int16, Int16 -> Int16)
  intrinsic mul_int16 (Int16, Int16 -> Int16)
  intrinsic div_int16 (Int16, Int16 -> Int16)
  intrinsic mod_int16 (Int16, Int16 -> Int16)

  intrinsic neg_int32 (Int32 -> Int32)
  intrinsic add_int32 (Int32, Int32 -> Int32)
  intrinsic sub_int32 (Int32, Int32 -> Int32)
  intrinsic mul_int32 (Int32, Int32 -> Int32)
  intrinsic div_int32 (Int32, Int32 -> Int32)
  intrinsic mod_int32 (Int32, Int32 -> Int32)

  intrinsic neg_int64 (Int64 -> Int64)
  intrinsic add_int64 (Int64, Int64 -> Int64)
  intrinsic sub_int64 (Int64, Int64 -> Int64)
  intrinsic mul_int64 (Int64, Int64 -> Int64)
  intrinsic div_int64 (Int64, Int64 -> Int64)
  intrinsic mod_int64 (Int64, Int64 -> Int64)

  // Signed integer comparisons.

  intrinsic lt_int8 (Int8, Int8 -> Bool)
  intrinsic gt_int8 (Int8, Int8 -> Bool)
  intrinsic le_int8 (Int8, Int8 -> Bool)
  intrinsic ge_int8 (Int8, Int8 -> Bool)
  intrinsic eq_int8 (Int8, Int8 -> Bool)
  intrinsic ne_int8 (Int8, Int8 -> Bool)

  intrinsic lt_int16 (Int16, Int16 -> Bool)
  intrinsic gt_int16 (Int16, Int16 -> Bool)
  intrinsic le_int16 (Int16, Int16 -> Bool)
  intrinsic ge_int16 (Int16, Int16 -> Bool)
  intrinsic eq_int16 (Int16, Int16 -> Bool)
  intrinsic ne_int16 (Int16, Int16 -> Bool)

  intrinsic lt_int32 (Int32, Int32 -> Bool)
  intrinsic gt_int32 (Int32, Int32 -> Bool)
  intrinsic le_int32 (Int32, Int32 -> Bool)
  intrinsic ge_int32 (Int32, Int32 -> Bool)
  intrinsic eq_int32 (Int32, Int32 -> Bool)
  intrinsic ne_int32 (Int32, Int32 -> Bool)

  intrinsic lt_int64 (Int64, Int64 -> Bool)
  intrinsic gt_int64 (Int64, Int64 -> Bool)
  intrinsic le_int64 (Int64, Int64 -> Bool)
  intrinsic ge_int64 (Int64, Int64 -> Bool)
  intrinsic eq_int64 (Int64, Int64 -> Bool)
  intrinsic ne_int64 (Int64, Int64 -> Bool)

  // Unsigned integer arithmetic.

  intrinsic neg_uint8 (UInt8 -> UInt8)
  intrinsic add_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic sub_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic mul_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic div_uint8 (UInt8, UInt8 -> UInt8)
  intrinsic mod_uint8 (UInt8, UInt8 -> UInt8)

  intrinsic neg_uint16 (UInt16 -> UInt16)
  intrinsic add_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic sub_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic mul_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic div_uint16 (UInt16, UInt16 -> UInt16)
  intrinsic mod_uint16 (UInt16, UInt16 -> UInt16)

  intrinsic neg_uint32 (UInt32 -> UInt32)
  intrinsic add_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic sub_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic mul_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic div_uint32 (UInt32, UInt32 -> UInt32)
  intrinsic mod_uint32 (UInt32, UInt32 -> UInt32)

  intrinsic neg_uint64 (UInt64 -> UInt64)
  intrinsic add_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic sub_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic mul_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic div_uint64 (UInt64, UInt64 -> UInt64)
  intrinsic mod_uint64 (UInt64, UInt64 -> UInt64)

  // Unsigned integer comparisons.

  intrinsic lt_uint8 (UInt8, UInt8 -> Bool)
  intrinsic gt_uint8 (UInt8, UInt8 -> Bool)
  intrinsic le_uint8 (UInt8, UInt8 -> Bool)
  intrinsic ge_uint8 (UInt8, UInt8 -> Bool)
  intrinsic eq_uint8 (UInt8, UInt8 -> Bool)
  intrinsic ne_uint8 (UInt8, UInt8 -> Bool)

  intrinsic lt_uint16 (UInt16, UInt16 -> Bool)
  intrinsic gt_uint16 (UInt16, UInt16 -> Bool)
  intrinsic le_uint16 (UInt16, UInt16 -> Bool)
  intrinsic ge_uint16 (UInt16, UInt16 -> Bool)
  intrinsic eq_uint16 (UInt16, UInt16 -> Bool)
  intrinsic ne_uint16 (UInt16, UInt16 -> Bool)

  intrinsic lt_uint32 (UInt32, UInt32 -> Bool)
  intrinsic gt_uint32 (UInt32, UInt32 -> Bool)
  intrinsic le_uint32 (UInt32, UInt32 -> Bool)
  intrinsic ge_uint32 (UInt32, UInt32 -> Bool)
  intrinsic eq_uint32 (UInt32, UInt32 -> Bool)
  intrinsic ne_uint32 (UInt32, UInt32 -> Bool)

  intrinsic lt_uint64 (UInt64, UInt64 -> Bool)
  intrinsic gt_uint64 (UInt64, UInt64 -> Bool)
  intrinsic le_uint64 (UInt64, UInt64 -> Bool)
  intrinsic ge_uint64 (UInt64, UInt64 -> Bool)
  intrinsic eq_uint64 (UInt64, UInt64 -> Bool)
  intrinsic ne_uint64 (UInt64, UInt64 -> Bool)

  intrinsic lt_char (Char, Char -> Bool)
  intrinsic gt_char (Char, Char -> Bool)
  intrinsic le_char (Char, Char -> Bool)
  intrinsic ge_char (Char, Char -> Bool)
  intrinsic eq_char (Char, Char -> Bool)
  intrinsic ne_char (Char, Char -> Bool)

  // Floating-point arithmetic.

  intrinsic neg_float32 (Float32 -> Float32)
  intrinsic add_float32 (Float32, Float32 -> Float32)
  intrinsic sub_float32 (Float32, Float32 -> Float32)
  intrinsic mul_float32 (Float32, Float32 -> Float32)
  intrinsic div_float32 (Float32, Float32 -> Float32)
  intrinsic mod_float32 (Float32, Float32 -> Float32)

  intrinsic neg_float64 (Float64 -> Float64)
  intrinsic add_float64 (Float64, Float64 -> Float64)
  intrinsic sub_float64 (Float64, Float64 -> Float64)
  intrinsic mul_float64 (Float64, Float64 -> Float64)
  intrinsic div_float64 (Float64, Float64 -> Float64)
  intrinsic mod_float64 (Float64, Float64 -> Float64)

  // Floating-point comparisons.

  intrinsic lt_float32 (Float32, Float32 -> Bool)
  intrinsic gt_float32 (Float32, Float32 -> Bool)
  intrinsic le_float32 (Float32, Float32 -> Bool)
  intrinsic ge_float32 (Float32, Float32 -> Bool)
  intrinsic eq_float32 (Float32, Float32 -> Bool)
  intrinsic ne_float32 (Float32, Float32 -> Bool)

  intrinsic lt_float64 (Float64, Float64 -> Bool)
  intrinsic gt_float64 (Float64, Float64 -> Bool)
  intrinsic le_float64 (Float64, Float64 -> Bool)
  intrinsic ge_float64 (Float64, Float64 -> Bool)
  intrinsic eq_float64 (Float64, Float64 -> Bool)
  intrinsic ne_float64 (Float64, Float64 -> Bool)

}

trait neg<T> (T -> T)

instance neg (Int8 -> Int8) { _::kitten::neg_int8 }
instance neg (Int16 -> Int16) { _::kitten::neg_int16 }
instance neg (Int32 -> Int32) { _::kitten::neg_int32 }
instance neg (Int64 -> Int64) { _::kitten::neg_int64 }
instance neg (UInt8 -> UInt8) { _::kitten::neg_uint8 }
instance neg (UInt16 -> UInt16) { _::kitten::neg_uint16 }
instance neg (UInt32 -> UInt32) { _::kitten::neg_uint32 }
instance neg (UInt64 -> UInt64) { _::kitten::neg_uint64 }
instance neg (Float32 -> Float32) { _::kitten::neg_float32 }
instance neg (Float64 -> Float64) { _::kitten::neg_float64 }

trait + <T> (T, T -> T)

about +:
  docs: """
    Operation of an additive monoid with `zero` as the identity.
    """
  operator:
    left 6

instance + (Int8, Int8 -> Int8) { _::kitten::add_int8 }
instance + (Int16, Int16 -> Int16) { _::kitten::add_int16 }
instance + (Int32, Int32 -> Int32) { _::kitten::add_int32 }
instance + (Int64, Int64 -> Int64) { _::kitten::add_int64 }
instance + (UInt8, UInt8 -> UInt8) { _::kitten::add_uint8 }
instance + (UInt16, UInt16 -> UInt16) { _::kitten::add_uint16 }
instance + (UInt32, UInt32 -> UInt32) { _::kitten::add_uint32 }
instance + (UInt64, UInt64 -> UInt64) { _::kitten::add_uint64 }
instance + (Float32, Float32 -> Float32) { _::kitten::add_float32 }
instance + (Float64, Float64 -> Float64) { _::kitten::add_float64 }

trait zero<T> (-> T)

instance zero (-> Int8) { 0i8 }
instance zero (-> Int16) { 0i16 }
instance zero (-> Int32) { 0i32 }
instance zero (-> Int64) { 0i64 }
instance zero (-> UInt8) { 0u8 }
instance zero (-> UInt16) { 0u16 }
instance zero (-> UInt32) { 0u32 }
instance zero (-> UInt64) { 0u64 }
instance zero (-> Float32) { 0.0f32 }
instance zero (-> Float64) { 0.0f64 }

trait - <T> (T, T -> T)

about -:
  operator:
    left 6

instance - (Int8, Int8 -> Int8) { _::kitten::sub_int8 }
instance - (Int16, Int16 -> Int16) { _::kitten::sub_int16 }
instance - (Int32, Int32 -> Int32) { _::kitten::sub_int32 }
instance - (Int64, Int64 -> Int64) { _::kitten::sub_int64 }
instance - (UInt8, UInt8 -> UInt8) { _::kitten::sub_uint8 }
instance - (UInt16, UInt16 -> UInt16) { _::kitten::sub_uint16 }
instance - (UInt32, UInt32 -> UInt32) { _::kitten::sub_uint32 }
instance - (UInt64, UInt64 -> UInt64) { _::kitten::sub_uint64 }
instance - (Float32, Float32 -> Float32) { _::kitten::sub_float32 }
instance - (Float64, Float64 -> Float64) { _::kitten::sub_float64 }

trait * <T> (T, T -> T)

about *:
  operator:
    left 7

instance * (Int8, Int8 -> Int8) { _::kitten::mul_int8 }
instance * (Int16, Int16 -> Int16) { _::kitten::mul_int16 }
instance * (Int32, Int32 -> Int32) { _::kitten::mul_int32 }
instance * (Int64, Int64 -> Int64) { _::kitten::mul_int64 }
instance * (UInt8, UInt8 -> UInt8) { _::kitten::mul_uint8 }
instance * (UInt16, UInt16 -> UInt16) { _::kitten::mul_uint16 }
instance * (UInt32, UInt32 -> UInt32) { _::kitten::mul_uint32 }
instance * (UInt64, UInt64 -> UInt64) { _::kitten::mul_uint64 }
instance * (Float32, Float32 -> Float32) { _::kitten::mul_float32 }
instance * (Float64, Float64 -> Float64) { _::kitten::mul_float64 }

trait / <T> (T, T -> T)

about /:
  operator:
    left 7

instance / (Int8, Int8 -> Int8) { _::kitten::div_int8 }
instance / (Int16, Int16 -> Int16) { _::kitten::div_int16 }
instance / (Int32, Int32 -> Int32) { _::kitten::div_int32 }
instance / (Int64, Int64 -> Int64) { _::kitten::div_int64 }
instance / (UInt8, UInt8 -> UInt8) { _::kitten::div_uint8 }
instance / (UInt16, UInt16 -> UInt16) { _::kitten::div_uint16 }
instance / (UInt32, UInt32 -> UInt32) { _::kitten::div_uint32 }
instance / (UInt64, UInt64 -> UInt64) { _::kitten::div_uint64 }
instance / (Float32, Float32 -> Float32) { _::kitten::div_float32 }
instance / (Float64, Float64 -> Float64) { _::kitten::div_float64 }

trait % <T> (T, T -> T)

about %:
  operator:
    left 7

instance % (Int8, Int8 -> Int8) { _::kitten::mod_int8 }
instance % (Int16, Int16 -> Int16) { _::kitten::mod_int16 }
instance % (Int32, Int32 -> Int32) { _::kitten::mod_int32 }
instance % (Int64, Int64 -> Int64) { _::kitten::mod_int64 }
instance % (UInt8, UInt8 -> UInt8) { _::kitten::mod_uint8 }
instance % (UInt16, UInt16 -> UInt16) { _::kitten::mod_uint16 }
instance % (UInt32, UInt32 -> UInt32) { _::kitten::mod_uint32 }
instance % (UInt64, UInt64 -> UInt64) { _::kitten::mod_uint64 }
instance % (Float32, Float32 -> Float32) { _::kitten::mod_float32 }
instance % (Float64, Float64 -> Float64) { _::kitten::mod_float64 }

define div_mod<T> (T, T -> T, T):
  -> x, y;
  (x / y) (x % y)

trait < <T> (T, T -> Bool)

about <:
  operator:
    4

trait > <T> (T, T -> Bool)

about >:
  operator:
    4

trait <= <T> (T, T -> Bool)

about <=:
  operator:
    4

trait >= <T> (T, T -> Bool)

about >=:
  operator:
    4

trait = <T> (T, T -> Bool)

about =:
  operator:
    4

trait <> <T> (T, T -> Bool)

about <>:
  operator:
    4

instance < (Int8, Int8 -> Bool) { _::kitten::lt_int8 }
instance > (Int8, Int8 -> Bool) { _::kitten::gt_int8 }
instance <= (Int8, Int8 -> Bool) { _::kitten::le_int8 }
instance >= (Int8, Int8 -> Bool) { _::kitten::ge_int8 }
instance = (Int8, Int8 -> Bool) { _::kitten::eq_int8 }
instance <> (Int8, Int8 -> Bool) { _::kitten::ne_int8 }

instance < (Int16, Int16 -> Bool) { _::kitten::lt_int16 }
instance > (Int16, Int16 -> Bool) { _::kitten::gt_int16 }
instance <= (Int16, Int16 -> Bool) { _::kitten::le_int16 }
instance >= (Int16, Int16 -> Bool) { _::kitten::ge_int16 }
instance = (Int16, Int16 -> Bool) { _::kitten::eq_int16 }
instance <> (Int16, Int16 -> Bool) { _::kitten::ne_int16 }

instance < (Int32, Int32 -> Bool) { _::kitten::lt_int32 }
instance > (Int32, Int32 -> Bool) { _::kitten::gt_int32 }
instance <= (Int32, Int32 -> Bool) { _::kitten::le_int32 }
instance >= (Int32, Int32 -> Bool) { _::kitten::ge_int32 }
instance = (Int32, Int32 -> Bool) { _::kitten::eq_int32 }
instance <> (Int32, Int32 -> Bool) { _::kitten::ne_int32 }

instance < (Int64, Int64 -> Bool) { _::kitten::lt_int64 }
instance > (Int64, Int64 -> Bool) { _::kitten::gt_int64 }
instance <= (Int64, Int64 -> Bool) { _::kitten::le_int64 }
instance >= (Int64, Int64 -> Bool) { _::kitten::ge_int64 }
instance = (Int64, Int64 -> Bool) { _::kitten::eq_int64 }
instance <> (Int64, Int64 -> Bool) { _::kitten::ne_int64 }

instance < (Char, Char -> Bool) { _::kitten::lt_char }
instance > (Char, Char -> Bool) { _::kitten::gt_char }
instance <= (Char, Char -> Bool) { _::kitten::le_char }
instance >= (Char, Char -> Bool) { _::kitten::ge_char }
instance = (Char, Char -> Bool) { _::kitten::eq_char }
instance <> (Char, Char -> Bool) { _::kitten::ne_char }

instance < (Float32, Float32 -> Bool) { _::kitten::lt_float32 }
instance > (Float32, Float32 -> Bool) { _::kitten::gt_float32 }
instance <= (Float32, Float32 -> Bool) { _::kitten::le_float32 }
instance >= (Float32, Float32 -> Bool) { _::kitten::ge_float32 }
instance = (Float32, Float32 -> Bool) { _::kitten::eq_float32 }
instance <> (Float32, Float32 -> Bool) { _::kitten::ne_float32 }

instance < (Float64, Float64 -> Bool) { _::kitten::lt_float64 }
instance > (Float64, Float64 -> Bool) { _::kitten::gt_float64 }
instance <= (Float64, Float64 -> Bool) { _::kitten::le_float64 }
instance >= (Float64, Float64 -> Bool) { _::kitten::ge_float64 }
instance = (Float64, Float64 -> Bool) { _::kitten::eq_float64 }
instance <> (Float64, Float64 -> Bool) { _::kitten::ne_float64 }

define abs<T> (T -> T):
  dup
  if ((< zero)):
    neg

// FIXME: Requires casting.
//
// define even<T> (T -> Bool):
//   (% 2) (= 0)
//
// define odd<T> (T -> Bool):
//   (% 2) (<> 0)

define max<T> (T, T -> T):
  -> a, b;
  if (a < b):
    b
  else:
    a

define min<T> (T, T -> T):
  -> a, b;
  if (a < b):
    a
  else:
    b

type Unit:
  case unit ()

about type Unit:
  docs: """
    The unit type, with a single value `unit`, useful as a placeholder type that
    carries no information.
    """

type Bool:
  case false
  case true

instance copy (Bool -> Bool) {}

define not (Bool -> Bool):
  if:
    false
  else:
    true

// Strict intersection.
trait & <T> (T, T -> T)

about &:
  operator:
    right 3

instance & (Bool, Bool -> Bool):
  -> x, y;
  if (x):
    y
  else:
    false

// Lazy intersection.
trait && <T> (T, (-> T) -> T)

about &&:
  operator:
    right 3

instance && (Bool, (-> Bool) -> Bool):
  -> x, y;
  if (x):
    y call
  else:
    false

// Strict union.
trait | <T> (T, T -> T)

about |:
  operator:
    right 2

instance | (Bool, Bool -> Bool):
  -> x, y;
  if (x):
    true
  else:
    y

// Lazy union.
trait || <T> (T, (-> T) -> T)

about ||:
  operator:
    right 2

instance || (Bool, (-> Bool) -> Bool):
  -> x, y;
  if (x):
    true
  else:
    y call

// Strict difference.
trait ~ <A> (A, A -> A)

about ~:
  operator:
    5

instance ~ (Bool, Bool -> Bool):
  swap
  if { not }

// Strict implication.
define --> (Bool, Bool -> Bool):
  -> a, b;
  if (a) { b } else { true }

about -->:
  operator:
    right 1

// Lazy implication.
define ---> (Bool, (-> Bool) -> Bool):
  -> a, b;
  if (a) { b call } else { true }

about --->:
  operator:
    right 1

// These (all, and, any, or) would be cleaner with lazy folds or slices.

define all<T> (List<T>, (T -> Bool) -> Bool):
  -> xs, f;
  match (xs head_tail)
  case some:
    unpair -> h, t;
    if (h f call):
      t f all
    else:
      false
  case none:
    true

// define and (List<Bool> -> Bool)

define any<T> (List<T>, (T -> Bool) -> Bool):
  -> xs, f;
  match (xs head_tail)
  case some:
    unpair -> h, t;
    if (h f call):
      true
    else:
      t f any
  case none:
    false

// define or<T> (List<Bool> -> Bool)

type Optional<T>:
  case none
  case some (T)

// instance copy<T> (Optional<T> -> Optional<T>) where (copy<T>) {}

define from_optional<T> (Optional<T>, T -> T):
  -> default;
  match
  case some {}
  else:
    default

define from_some<T> (Optional<T> -> T +Fail):
  match
  case some {}
  else:
    "from_some: none" fail

define is_none<T> (Optional<T> -> Bool):
  match
  case none:
    true
  else:
    false

define is_some<T> (Optional<T> -> Bool):
  match
  case some:
    drop true
  else:
    false

define optional<R..., S..., A>
(R..., Optional<A>, (R..., A -> S...), (R... -> S...) -> S...):
  -> f, g;
  match
  case some:
    f call
  case none:
    g call

define lift_optional_2<A, B, C> (Optional<A>, Optional<B>, (A, B -> C) -> Optional<C>):
  -> mx, my, f;
  match (mx)
  case some -> x:
    match (my)
    case some -> y:
      x y f call some
    else:
      none
  else:
    none

// TODO: map Optional

type Pair<A, B>:
  case pair (A, B)

// instance copy<A, B> (Pair<A, B> -> Pair<A, B>) where (copy<A>, copy<B>) {}

define unpair<A, B> (Pair<A, B> -> A, B):
  match case pair {}

define flip<A, B> (Pair<A, B> -> Pair<B, A>):
  unpair swap pair

define first<A, B> (Pair<A, B> -> A):
  unpair drop

define second<A, B> (Pair<A, B> -> B):
  unpair swap drop

// TODO: map Pair

type Either<A, B>:
  case left (A)
  case right (B)

// instance copy<A, B> (Either<A, B> -> Either<A, B>) where (copy<A>, copy<B>) {}

define from_left<A, B> (Either<A, B> -> A +Fail):
  match
  case left {}
  else:
    "from_left: right" fail

define from_right<A, B> (Either<A, B> -> B +Fail):
  match
  case right {}
  else:
    "from_right: left" fail

define get_left<A, B> (Either<A, B> -> Optional<A>):
  match
  case left:
    some
  else:
    none

define get_right<A, B> (Either<A, B> -> Optional<B>):
  match
  case right:
    some
  else:
    none

define is_left<A, B> (Either<A, B> -> Bool):
  match
  case left:
    drop true
  else:
    false

define is_right<A, B> (Either<A, B> -> Bool):
  match
  case right:
    drop true
  else:
    false

define either<R..., S..., A, B>
(R..., Either<A, B>, (R..., A -> S...), (R..., B -> S...) -> S...):
  -> f, g;
  match
  case left:
    f call
  case right:
    g call

define map_left<A, B, C> (Either<A, B>, (A -> C) -> Either<C, B>):
  -> f;
  match
  case left:
    f call left
  case right:
    right

define map_right<A, B, C> (Either<A, B>, (B -> C) -> Either<A, C>):
  -> f;
  match
  case right:
    f call right
  case left:
    left

type Pointer<T>:
  case _pointer (UInt64)

// instance copy<T> (Pointer<T> -> Pointer<T>) {}

// do (until) { ... }
define until<R...> (R..., (R... -> R..., Bool) -> R...):
  -> f;
  if (f call not):
    f until

// do (while) { ... }
define while<R...> (R..., (R... -> R..., Bool) -> R...):
  -> f;
  if (f call):
    f while

type List<T>:
  case _list (Pointer<T>, Pointer<T>, Pointer<T>)

// instance copy<T> (List<T> -> List<T>) where (copy<T>)

vocab kitten {

  intrinsic empty<T> (List<T> -> Bool)
  intrinsic head<T> (List<T> -> Optional<T>)
  intrinsic tail<T> (List<T> -> Optional<List<T>>)
  intrinsic init<T> (List<T> -> Optional<List<T>>)
  intrinsic last<T> (List<T> -> Optional<T>)
  intrinsic append<T> (List<T>, T -> List<T>)
  intrinsic prepend<T> (T, List<T> -> List<T>)
  intrinsic cat<T> (List<T>, List<T> -> List<T>)
  intrinsic get<T> (List<T>, Int32 -> Optional<T>)
  intrinsic set<T> (List<T>, T, Int32 -> Optional<List<T>>)

}

define empty<T> (List<T> -> Bool):
  _::kitten::empty

// TODO: Use Size, not Int32.
define length<T> (List<T> -> Int32):
  match (tail)
  case none:
    0
  case some:
    length (+ 1)

define elem<T> (T, List<T> -> Bool):
  -> x, xs;
  match (xs head_tail)
  case some:
    unpair -> h, t;
    if (x = h):
      true
    else:
      x t elem
  case none:
    false

// TODO: Partial instances.
trait == <T> (List<T>, List<T> -> Bool)

instance == (List<Int32>, List<Int32> -> Bool):
  -> xs, ys;
  if (xs length <> ys length):
    false
  else:
    match (xs head_tail)
    case some:
      unpair -> x, xs_;
      match (ys head_tail)
      case some:
        unpair -> y, ys_;
        if (x <> y):
          false
        else:
          xs_ == ys_
      case none:
        true
    case none:
      true

define head<T> (List<T> -> Optional<T>):
  _::kitten::head

define tail<T> (List<T> -> Optional<List<T>>):
  _::kitten::tail

define init<T> (List<T> -> Optional<List<T>>):
  _::kitten::init

define last<T> (List<T> -> Optional<T>):
  _::kitten::last

define append<T> (List<T>, T -> List<T>):
  _::kitten::append

define prepend<T> (T, List<T> -> List<T>):
  _::kitten::prepend

define cat<T> (List<T>, List<T> -> List<T>):
  _::kitten::cat

define get<T> (List<T>, Int32 -> Optional<T>):
  _::kitten::get

define get_all<T> (List<T>, List<Int32> -> List<Optional<T>>):
  -> list, indices;
  indices { list swap get } map

define set<T> (List<T>, T, Int32 -> Optional<List<T>>):
  _::kitten::set

define modify<T> (List<T>, (T -> T), Int32 -> Optional<List<T>>):
  -> xs, f, i;
  match (xs i get)
  case none:
    none
  case some -> x:
    xs (x f call) i set

define replicate<T> (T, Int32 -> List<T>):
  -> value, count;
  if (count <= 0):
    []
  else:
    value (count - 1) replicate
    value append

define head_tail<T> (List<T> -> Optional<Pair<T, List<T>>>):
  -> xs;
  match (xs head)
  case none:
    none
  case some -> y:
    match (xs tail)
    case none:
      none
    case some -> ys:
      y ys pair some

define map<A, B, +P> (List<A>, (A -> B +P) -> List<B> +P):
  -> xs, f;
  match (xs head_tail)
  case none:
    []
  case some:
    unpair -> y, ys;
    y f call -> z;
    ys f map -> zs;
    z zs prepend

define map_index<A, B, +P> (List<A>, (A, Int32 -> B +P) -> List<B> +P):
  0 map_index::helper

vocab map_index {

  define helper<A, B, +P> (List<A>, (A, Int32 -> B +P), Int32 -> List<B> +P):
    -> xs, f, i;
    match (xs head_tail)
    case none:
      []
    case some:
      unpair -> y, ys;
      y i f call -> z;
      ys f (i + 1) helper -> zs;
      z zs prepend

}

define each<T, +P> (List<T>, (T -> +P) -> +P):
  -> f;
  match (head_tail)
  case some:
    unpair -> h, t;
    h f call
    t f each
  case none {}

define filter<T> (List<T>, (T -> Bool) -> List<T>):
  -> f;
  match (head_tail)
  case some:
    unpair -> h, t;
    if (h f call):
      h (t f filter) prepend
    else:
      t f filter
  case none:
    []

define find<T> (List<T>, (T -> Bool) -> Optional<T>):
  filter head

define fold_left<A, B> (List<B>, A, (A, B -> A) -> A):
  -> xs, z, k;
  match (xs head)
  case some -> x:
    { xs tail from_some } with (+Fail)
    (z x k call) k fold_left
  case none:
    z

define fold_left_non_empty<T> (List<T>, (T, T -> T) -> Optional<T>):
  -> xs, f;
  match (xs head)
  case some -> x:
    { xs tail from_some } with (+Fail)
    x f fold_left some
  else:
    none

define fold_right<A, B> (List<A>, B, (A, B -> B) -> B):
  -> xs, z, k;
  match (xs last)
  case some -> x:
    { xs init from_some } with (+Fail)
    (x z k call) k fold_right
  else:
    z

define fold_right_non_empty<A> (List<A>, (A, A -> A) -> Optional<A>):
  -> xs, f;
  match (xs last)
  case some -> x:
    { xs init from_some } with (+Fail)
    x f fold_right some
  else:
    none

define map_concat<A, B> (List<A>, (A -> List<B>) -> List<B>):
  map concat

define concat<T> (List<List<T>> -> List<T>):
  [] \cat fold_left

define concat_optionals<T> (List<Optional<T>> -> List<T>):
  []
  { match case some { append } case none {} }
  fold_left

define maximum<T> (List<T> -> Optional<T>):
  \max fold_left_non_empty

define minimum<T> (List<T> -> Optional<T>):
  \min fold_left_non_empty

define cartesian<A, B> (List<A>, List<B> -> List<Pair<A, B>>):
  \pair cartesian_with

define cartesian_with<A, B, C> (List<A>, List<B>, (A, B -> C) -> List<C>):
  -> xs, ys, f;
  xs do (map_concat) -> x:
    ys do (map) -> y:
      x y f call

vocab kitten {

  intrinsic print (List<Char> -> +IO)
  intrinsic get_line (-> List<Char> +IO)

  // FIXME: Figure out handles and generalize this.
  intrinsic flush_stdout (-> +IO)

}

trait show<T> (T -> List<Char>)

instance show (List<Char> -> List<Char>) {}

instance show (Char -> List<Char>):
  -> x;
  [x]

instance show (Bool -> List<Char>):
  if { "true" } else { "false" }

vocab kitten {

  intrinsic show_int8 (Int8 -> List<Char>)
  intrinsic show_int16 (Int16 -> List<Char>)
  intrinsic show_int32 (Int32 -> List<Char>)
  intrinsic show_int64 (Int64 -> List<Char>)
  intrinsic show_uint8 (UInt8 -> List<Char>)
  intrinsic show_uint16 (UInt16 -> List<Char>)
  intrinsic show_uint32 (UInt32 -> List<Char>)
  intrinsic show_uint64 (UInt64 -> List<Char>)

}

instance show (Int8 -> List<Char>):
  _::kitten::show_int8

instance show (Int16 -> List<Char>):
  _::kitten::show_int16

instance show (Int32 -> List<Char>):
  _::kitten::show_int32

instance show (Int64 -> List<Char>):
  _::kitten::show_int64

instance show (UInt8 -> List<Char>):
  _::kitten::show_uint8

instance show (UInt16 -> List<Char>):
  _::kitten::show_uint16

instance show (UInt32 -> List<Char>):
  _::kitten::show_uint32

instance show (UInt64 -> List<Char>):
  _::kitten::show_uint64

define print<T> (T -> +IO) /* where (show<T>) */ :
  show _::kitten::print

define say<T> (T -> +IO):
  print newline

define newline (-> +IO):
  "\n" print

define get_line (-> List<Char> +IO):
  _::kitten::get_line

define ask (List<Char> -> List<Char> +IO):
  print _::kitten::flush_stdout get_line

permission Fail<R..., S..., +P> (R..., (R... -> S... +Fail +P) -> S... +P):
  with (+Fail)

permission Exit<R..., S..., +P> (R..., (R... -> S... +Exit +P) -> S... +P):
  with (+Exit)

vocab kitten {

  intrinsic abort<R..., S...> (R..., List<Char> -> S... +Fail)
  intrinsic exit<R..., S...> (R..., Int32 -> S... +Exit)

}

define abort<R..., S...> (R... -> S... +Fail):
  "abort called" _::kitten::abort

define exit<R..., S...> (R..., Int32 -> S... +Exit):
  _::kitten::exit

define fail<R..., S...> (R..., List<Char> -> S... +Fail):
  _::kitten::abort

define assert<+P> (List<Char>, (-> Bool +P) -> +Fail +P):
  -> message, test;
  do (with (-Fail)):
    test call
  if (not):
    message _::kitten::abort

permission IO<R..., S..., +P> (R..., (R... -> S... +IO +P) -> S... +P):
  with (+IO)

define drop<T> (T ->):
  -> _;

define drop2<A, B> (A, B ->):
  -> _, _;

define dup<T> (T -> T, T):
  -> x;
  x x

define dup2<A, B> (A, B -> A, B, A, B):
  -> x, y;
  x y x y

define swap<A, B> (A, B -> B, A):
  -> x, y;
  y x

define dip<R..., S..., T> (R..., T, (R... -> S...) -> S..., T):
  -> x, f;
  f call x

define compose<R..., S..., T...>
((R... -> S...), (S... -> T...) -> (R... -> T...)):
  -> f, g;
  { f call g call }

define function<T> (T -> (-> T)):
  -> x;
  { x }

define both<A, B, C, D> (A, B, (A -> C), (B -> D) -> C, D):
  -> x, y, f, g;
  x f call -> a;
  y g call -> b;
  a b

define both_to<A, B, C> (A, (A -> B), (A -> C) -> B, C):
  -> x, f, g;
  x f call -> a;
  x g call -> b;
  a b

define to_both<A, B> (A, A, (A -> B) -> B, B):
  -> x, y, f;
  x f call -> a;
  y f call -> b;
  a b

vocab kitten {

  intrinsic draw (List<List<RGBA>> -> +IO)

}

type RGBA:
  case rgba (UInt8, UInt8, UInt8, UInt8)

instance copy (RGBA -> RGBA) {}

define draw (List<List<RGBA>> -> +IO):
  _::kitten::draw

define circle (Int32 -> List<List<RGBA>>):
  -> r;
  0u8 0u8 0u8 0u8 rgba
  (2 * r + 1) replicate
  (2 * r + 1) replicate
  do (map_index) -> row, y:
    row do (map_index) -> pixel, x:
      x - r -> dx;
      y - r -> dy;
      if (dx * dx + dy * dy - r * r <= 0):
        255u8 0u8 0u8 255u8 rgba
      else:
        pixel
