// Composes two functions.
define compose @r... s... t... u...
  (r... (s... -> t...) (t... -> u...) -> r... (s... -> u...)):
  -> f g;
  { f apply g apply }

// Operator alias for 'compose'.
infix_right 9 >>>
define >>> @r... s... t... u...
  (r... (s... -> t...) (t... -> u...) -> r... (s... -> u...)):
  compose

infix_right 9 ∘
define ∘ @r... s... t... u...
  (r... (s... -> t...) (t... -> u...) -> r... (s... -> u...)):
  compose

// Wraps a value in a function.
define function @a (a -> (-> a)):
  -> x;
  \x

// Wraps a value in a unary function.
define const @a b (a -> b -> a):
  -> x;
  { drop x }

// Applies a unary function to two values.
define toBoth @a b (a a (a -> b) -> b b):
  -> x y f;
  x f apply -> a;
  y f apply -> b;
  a b

// Applies two unary functions to one value.
define bothTo @a b c (a (a -> b) (a -> c) -> b c):
  -> x f g;
  x f apply -> a;
  x g apply -> b;
  a b

// Applies two unary functions to two values.
define both @a b c d (a b (a -> c) (b -> d) -> c d):
  -> x y f g;
  x f apply -> a;
  y g apply -> b;
  a b
