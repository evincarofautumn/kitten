// Unsafely gets the left branch of a choice.
define fromLeft @ a b (a | b -> a):
  __from_left

// Unsafely gets the right branch of a choice.
define fromRight @ a b (a | b -> b):
  __from_right

// Safely gets the left branch of a choice.
define getLeft @ a b (a | b -> a?):
  choice:
    some
  else:
    drop none

// Safely gets the right branch of a choice.
define getRight @ a b (a | b -> b?):
  choice:
    drop none
  else:
    some

// Whether a choice is left.
define isLeft @ a b (a | b -> bool):
  choice:
    drop true
  else:
    drop false

// Whether a choice is right.
define isRight @ a b (a | b -> bool):
  choice:
    drop false
  else:
    drop true

// Constructs a left choice.
define left @ a b (a -> a | b):
  __left

// Maps a function over the left branch of a choice.
define liftLeft @ a b c ((a | b) (a -> c) -> c | b):
  -> f;
  choice:
    f apply left
  else:
    right

// Maps a function over the right branch of a choice.
define liftRight @ a b c ((a | b) (b -> c) -> a | c):
  -> f;
  choice:
    left
  else:
    f apply right

// Constructs a right choice.
define right @ a b (b -> a | b):
  __right
